printf("Vui long doi ");
    int i,j,a;
    for(int i = 0; i <= 6; i++)
    {
        for(j = 0; j < 100000000; j++) //second loop only excute a = j not printf
        a = j;
        printf(".");
    }
    // for(i = 32; i ; i++)
    // {
    //     for(j = 0; j < i; j++)
    //         a = j;
                system("color ");
    // }
    // printf("\033[2J\033[1;1H");

    // //begin program
    // //prompt and validate the mode selection (A/C)
    // enter();
    // if (toupper(mode) == 'A')
    // {
    //     //confirm password and validation for accessing admin mode
    //     printf("De vao che do Admin, vui long nhap mat khau: ");
    //     conf();
    //     //prompt and validate the admin's choice
    //     admin();
    // }
    // else
    // {
    //     //prompt and validate the customer's choice
    //     customer();
    // }
    do i need counter order , unpaid order counter order it array?
    
    //read all orders from file using readOrder function
Order* readAllOrders(const char* fileName)
{
    char filePath[MAX_PATH_LENGTH];
    strcpy(filePath, BASE_DATA_PATH);
    strcat(filePath, fileName);

    FILE* orderP = fopen(filePath, "r");
    if (orderP == NULL) {
        printf("Unable to read file.");
        exit(-1);
    } 

    Order* orders = malloc(sizeof(Order));
    if(orders == NULL)
    {
        printf("Memory allocation failed.");
        return NULL;
    }
    int numOrder = 0;
    while(true) {
        Order tempOrder = readOrder(fileName);
        orders = realloc(orders, (numOrder + 1) * sizeof(Order));
        if (orders == NULL)
        {   
            free(orders);
            printf("Memory reallocation failed.");
            return NULL;
        }
        orders[numOrder] = tempOrder; 
        numOrder++;
    }
    return orders;
    fclose(orderP);
}
void writeOrderAtLine(const char* fileName, Order *order, int line)
{
    char buffer[1000];
    char filePath[MAX_PATH_LENGTH];
    strcpy(filePath, BASE_DATA_PATH);
    strcat(filePath, fileName);

    FILE* orderP = fopen(filePath, "r");
    if (orderP == NULL) {
        printf("Unable to read file.");
        return;
    } 
    FILE* tempFile = fopen("temp.txt", "w");
    if (tempFile == NULL) {
        printf("Unable to open temp file.");
        return;
    }
    int currentLine = 0;
    while(fgets(buffer, sizeof(buffer), orderP))
    {
        if(currentLine == line)
        {
            fprintf(tempFile, "%s,%d", order->date, order->orderID);
            for(int i = 0; i < order->total; i++)
            {   
                //serialize
                fprintf(tempFile, ",%d,%s,%d,%.0f",
                        order->items[i].dish.PIN,
                        order->items[i].dish.name,
                        order->items[i].quantity,
                        order->items[i].dish.price);
            }
            fprintf(tempFile, "\n");
        }
        else
        {
            fprintf(tempFile, "%s", buffer);
        }
        currentLine++;
    }
    fclose(orderP);
    fclose(tempFile);
    remove(filePath); 
    rename("temp.txt", filePath);
}
void updateOrder(const char* fileName, Order order[], int orderID)
{
    char filePath[MAX_PATH_LENGTH];
    strcpy(filePath, BASE_DATA_PATH);
    strcat(filePath, fileName);

    FILE* orderP = fopen(filePath, "r");
    if (orderP == NULL) {
        printf("Unable to read file.");
        return;
    } 
    while(true) {
        int check = fscanf(orderP, "%[^,],%d", tempOrder.date, &tempOrder.orderID);
        if(check != 2)
        {
            break;
        }
        if(tempOrder.orderID == orderID)
        {
            writeOrder(fileName, order);
        }
        else
        {
            writeOrder(fileName, &tempOrder);
        }
    }
    fclose(orderP);
}
char* filePath = (char*)malloc(MAX_PATH_LENGTH);
    if(filePath == NULL)
    {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    // strcpy(filePath,createInvoiceFilePath(date));

char listOrderFiles[MAX][MAX];
    int orderFilesTotal = 0;
    getListOrders(listOrderFiles, &orderFilesTotal);
    
    for (int i = 0; i < orderFilesTotal; i++)
    {   
        Order order = readOrder(listOrderFiles[i],);
        printf("Order ID: %d\n", order.orderID);
        printf("Date: %s\n", order.date);
        printf("Status: %s\n", order.status);
        printf("Total: %d\n", order.total);
        for(int i = 0; i < order.total; i++)
        {
            printf("Dish %d\n", i + 1);
            printf("PIN: %d\n", order.items[i].dish.PIN);
            printf("Name: %s\n", order.items[i].dish.name);
            printf("Price: %.0f\n", order.items[i].dish.price);
            printf("Quantity: %d\n", order.items[i].quantity);
        }
    }

mã orderID có các giá trị rác làm cho orderID bị sai lệch
dùng 2 for để compare string or not?
neu co index ma ko co file order thi se read failed.
write index bi lap lai
hoa don chua thanh toan bi thieu? 
123a!!
reset 0 ? what to with garvage value 

xoa het 
customize 1
add how many at once?
for (int i = 0; i < menu.total; i++)
        {
            if (dishPIN == menu.dishes[i].PIN)
            {
                orderItem->dish = menu.dishes[i];
                printf("Vui long nhap so luong mon an: ");
                while (scanf("%d", &orderItem->quantity) != 1)
                {
                    if (orderItem->quantity <= 0)
                    {
                        clstd();
                        printf("Vui long nhap dung so luong: ");
                    }
                    else
                    {
                        clstd();
                        printf("Vui long nhap dung so luong: ");
                    }
                }
                printf("Ban da chon mon %s voi so luong %d va gia %0.0f\n", orderItem->dish.name, orderItem->quantity, orderItem->dish.price);
                return 0;
            }
        }